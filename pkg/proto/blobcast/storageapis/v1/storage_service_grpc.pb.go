// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: blobcast/storageapis/v1/storage_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageService_GetChunkReference_FullMethodName    = "/blobcast.storageapis.v1.StorageService/GetChunkReference"
	StorageService_GetChunkData_FullMethodName         = "/blobcast.storageapis.v1.StorageService/GetChunkData"
	StorageService_GetDirectoryManifest_FullMethodName = "/blobcast.storageapis.v1.StorageService/GetDirectoryManifest"
	StorageService_GetFileManifest_FullMethodName      = "/blobcast.storageapis.v1.StorageService/GetFileManifest"
	StorageService_GetFileData_FullMethodName          = "/blobcast.storageapis.v1.StorageService/GetFileData"
	StorageService_BatchGetFileManifest_FullMethodName = "/blobcast.storageapis.v1.StorageService/BatchGetFileManifest"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	GetChunkReference(ctx context.Context, in *GetChunkReferenceRequest, opts ...grpc.CallOption) (*GetChunkReferenceResponse, error)
	GetChunkData(ctx context.Context, in *GetChunkDataRequest, opts ...grpc.CallOption) (*GetChunkDataResponse, error)
	GetDirectoryManifest(ctx context.Context, in *GetDirectoryManifestRequest, opts ...grpc.CallOption) (*GetDirectoryManifestResponse, error)
	GetFileManifest(ctx context.Context, in *GetFileManifestRequest, opts ...grpc.CallOption) (*GetFileManifestResponse, error)
	GetFileData(ctx context.Context, in *GetFileDataRequest, opts ...grpc.CallOption) (*GetFileDataResponse, error)
	BatchGetFileManifest(ctx context.Context, in *BatchGetFileManifestRequest, opts ...grpc.CallOption) (*BatchGetFileManifestResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) GetChunkReference(ctx context.Context, in *GetChunkReferenceRequest, opts ...grpc.CallOption) (*GetChunkReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkReferenceResponse)
	err := c.cc.Invoke(ctx, StorageService_GetChunkReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetChunkData(ctx context.Context, in *GetChunkDataRequest, opts ...grpc.CallOption) (*GetChunkDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkDataResponse)
	err := c.cc.Invoke(ctx, StorageService_GetChunkData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetDirectoryManifest(ctx context.Context, in *GetDirectoryManifestRequest, opts ...grpc.CallOption) (*GetDirectoryManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDirectoryManifestResponse)
	err := c.cc.Invoke(ctx, StorageService_GetDirectoryManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetFileManifest(ctx context.Context, in *GetFileManifestRequest, opts ...grpc.CallOption) (*GetFileManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileManifestResponse)
	err := c.cc.Invoke(ctx, StorageService_GetFileManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetFileData(ctx context.Context, in *GetFileDataRequest, opts ...grpc.CallOption) (*GetFileDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileDataResponse)
	err := c.cc.Invoke(ctx, StorageService_GetFileData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) BatchGetFileManifest(ctx context.Context, in *BatchGetFileManifestRequest, opts ...grpc.CallOption) (*BatchGetFileManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetFileManifestResponse)
	err := c.cc.Invoke(ctx, StorageService_BatchGetFileManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility.
type StorageServiceServer interface {
	GetChunkReference(context.Context, *GetChunkReferenceRequest) (*GetChunkReferenceResponse, error)
	GetChunkData(context.Context, *GetChunkDataRequest) (*GetChunkDataResponse, error)
	GetDirectoryManifest(context.Context, *GetDirectoryManifestRequest) (*GetDirectoryManifestResponse, error)
	GetFileManifest(context.Context, *GetFileManifestRequest) (*GetFileManifestResponse, error)
	GetFileData(context.Context, *GetFileDataRequest) (*GetFileDataResponse, error)
	BatchGetFileManifest(context.Context, *BatchGetFileManifestRequest) (*BatchGetFileManifestResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageServiceServer struct{}

func (UnimplementedStorageServiceServer) GetChunkReference(context.Context, *GetChunkReferenceRequest) (*GetChunkReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkReference not implemented")
}
func (UnimplementedStorageServiceServer) GetChunkData(context.Context, *GetChunkDataRequest) (*GetChunkDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkData not implemented")
}
func (UnimplementedStorageServiceServer) GetDirectoryManifest(context.Context, *GetDirectoryManifestRequest) (*GetDirectoryManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryManifest not implemented")
}
func (UnimplementedStorageServiceServer) GetFileManifest(context.Context, *GetFileManifestRequest) (*GetFileManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileManifest not implemented")
}
func (UnimplementedStorageServiceServer) GetFileData(context.Context, *GetFileDataRequest) (*GetFileDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileData not implemented")
}
func (UnimplementedStorageServiceServer) BatchGetFileManifest(context.Context, *BatchGetFileManifestRequest) (*BatchGetFileManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetFileManifest not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}
func (UnimplementedStorageServiceServer) testEmbeddedByValue()                        {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_GetChunkReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetChunkReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetChunkReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetChunkReference(ctx, req.(*GetChunkReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetChunkData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetChunkData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetChunkData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetChunkData(ctx, req.(*GetChunkDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetDirectoryManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetDirectoryManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetDirectoryManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetDirectoryManifest(ctx, req.(*GetDirectoryManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetFileManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetFileManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetFileManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetFileManifest(ctx, req.(*GetFileManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetFileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetFileData(ctx, req.(*GetFileDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_BatchGetFileManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetFileManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).BatchGetFileManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_BatchGetFileManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).BatchGetFileManifest(ctx, req.(*BatchGetFileManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blobcast.storageapis.v1.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunkReference",
			Handler:    _StorageService_GetChunkReference_Handler,
		},
		{
			MethodName: "GetChunkData",
			Handler:    _StorageService_GetChunkData_Handler,
		},
		{
			MethodName: "GetDirectoryManifest",
			Handler:    _StorageService_GetDirectoryManifest_Handler,
		},
		{
			MethodName: "GetFileManifest",
			Handler:    _StorageService_GetFileManifest_Handler,
		},
		{
			MethodName: "GetFileData",
			Handler:    _StorageService_GetFileData_Handler,
		},
		{
			MethodName: "BatchGetFileManifest",
			Handler:    _StorageService_BatchGetFileManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blobcast/storageapis/v1/storage_service.proto",
}
